install.packages("microbenchmark")
tablon <- readRDS("ipo11_es_detalle.RDS")
dim(tablon)
microbenchmark(
tabla <- leerTablon,
tablilla <- readRDS("ipo11_es_detalle.RDS")
)
library(microbenchmark)
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
microbenchmark(
tabla <- leerTablon,
tablilla <- readRDS("ipo11_es_detalle.RDS")
)
microbenchmark(
tabla <- leerTablon(),
tablilla <- readRDS("ipo11_es_detalle.RDS")
)
View(tabla)
install-
install.packages("lineprof")
library(lineprof)
update()
version
version
install.packages("lineprof")
install.packages("yaml")
library(lineprof)
install.packages("lineprof")
install.packages("aaaa")
library(lineprof)
install.packages("profvis")
library(profvis)
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
profvis({
tabla <- leerTablon(),
tablilla <- readRDS("ipo11_es_detalle.RDS")
})
profvis({
tabla <- leerTablon()
tablilla <- readRDS("ipo11_es_detalle.RDS")
})
tabla
tablilla
tabla$P_SP_MDMERA <- 1
rm(list = ls())
source('~/.active-rstudio-document', echo=TRUE)
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tablilla <- readRDS("CopyOfipo11_es_detalle.RDS")
tablilla$P_SP_MDMERA <- 1
})
setwd("C:/Users/IGarleni/Desktop/R-Workspace")
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tablilla <- readRDS("CopyOfipo11_es_detalle.RDS")
tablilla$P_SP_MDMERA <- 1
})
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tablilla <- readRDS("asdf.RDS")
tablilla$P_SP_MDMERA <- 1
})
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tabla$P_SP_MDMERA
tablilla <- readRDS("asdf.RDS")
tablilla$P_SP_MDMERA <- 1
tabla$P_SP_MDMERA
})
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tabla$P_SP_MDMERA
tablilla <- readRDS("asdf.RDS")
tablilla$P_SP_MDMERA <- 1
tablilla$P_SP_MDMERA
})
bichaso <- rbind(tabla,tabla,tabla)
bichaso <- rbind(tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla)
bichaso <- rbind(tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla,tabla)
saveRDS(bichaso, "asdf.RDS")
saveRDS(bichaso, "ipo11_es_detalle.RDS")
}")
saveRDS(bichaso, "ipo11_es_detalle.RDS")
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tabla$P_SP_MDMERA
tablilla <- readRDS("asdf.RDS")
tablilla$P_SP_MDMERA <- 1
tablilla$P_SP_MDMERA
})
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tablilla <- readRDS("asdf.RDS")
tablilla$P_SP_MDMERA <- 1
tablilla$P_SP_MDMERA
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tabla$P_SP_MDMERA
})
rm(list = ls())
library(profvis)
profvis({
leerTablon = function()
{
tablon <- readRDS("ipo11_es_detalle.RDS")
return (tablon)
}
tablilla <- readRDS("asdf.RDS")
tablilla$P_SP_MDMERA <- 1
tablilla$P_SP_MDMERA
tablilla <- NULL
tabla <- leerTablon()
tabla$P_SP_MDMERA <- 1
tabla$P_SP_MDMERA
})
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(iris[["Sepal.Length"]])
as.numeric(names(table(iris[["Sepal.Length"]])[which.max(table(iris[["Sepal.Length"]]))]))
getmode <- function(inputData) {
uniqData <- unique(inputData)
uniqData[which.max(tabulate(match(inputData, uniqData)))]
}
getmode(iris[["Sepal.Length"]])
as.numeric(names(table(iris[["Sepal.Length"]])[which.max(table(iris[["Sepal.Length"]]))]))
getmode(iris[["Sepal.Width"]])
getmode(c(2,2,3,3))
getmode(c(2,2,3,3,3))
getmode(c(2,2,2,3,3,3))
getmode(c(3,3,3,2,2,2))
lista <-  list(hola = "aa", adios = "bb")
data.frame(list)
data.frame(lista)
#' @description Function that returns libraries' dependencies over a list of libraries, sorted by
#'  its dependency. Being ['n'=length(libraries)] and [1<='i'<='n'], library 'i' depends (or not)
#'  on the previous '1' to 'i' libraries, but never the other way around.
#' @import miniCRAN
#'
#' @param libraries: a list of libraries the user wants to analyze.
#' @return vector with dependencies and library, sorted by its dependency.
#'
#' @author Italo Garleni
#'
getDependencies = function(libraries)
{
# Obtener dependencias del primero
firstLibrary = libraries[1]
lastLibraries = libraries[-1]
firstLibraryDependencies = tryCatch(
{
pkgDep(firstLibrary, suggests=F, includeBasePkgs=T,depends = T)
},
error = function(e) {
firstLibrary
}
)
if( length(firstLibraryDependencies) > 1)
{
print(paste0("------", firstLibrary, " have multiple dependencies..."))
firstLibraryDependencies = firstLibraryDependencies[-1]
firstLibraryDependencies = c(getDependencies(firstLibraryDependencies), firstLibrary)
}
else
{
print(paste0(firstLibraryDependencies, " doesnt have dependencies."))
}
if(length(libraries) > 1)
{
lastLibraryDependencies = getDependencies(libraries[-1])
duplicatedDependencies = intersect(firstLibraryDependencies, lastLibraryDependencies)
finalDependencies = firstLibraryDependencies[!firstLibraryDependencies %in% duplicatedDependencies]
finalDependencies = c(lastLibraryDependencies, finalDependencies)
}
else
finalDependencies = firstLibraryDependencies
finalDependencies
}
getDependencies("microbenchmark")
source('C:/Users/IGarleni/Desktop/R-Workspace/utils/getDependencies/getDependencies.R', echo=TRUE)
dependencies = getDependencies("profvis")
dependencies
library(xml2)
library(xml2)
xmlRoot = xml_new_root("xmlRootName")
write_xml(xmlRoot, file = paste0(filePath, xmlRootName, ".xml"), options = c("no_empty_tags","format"))
write_xml(xmlRoot, file = "prueba.xml", options = c("no_empty_tags","format"))
library(xml2)
xmlRoot = xml_new_root("xmlRootName")
xml_add_child(xmlRoot, "hijo")
child = xml_child(xmlRoot, "hijo")
xml_text(child) <- data
write_xml(xmlRoot, file = "prueba.xml", options = c("no_empty_tags","format"))
xml_text(child) <- "hola"
write_xml(xmlRoot, file = "prueba.xml", options = c("no_empty_tags","format"))
write_xml(xmlRoot, file = "prueba.xml", options = "no_empty_tags")
write_xml(xmlRoot, file = "prueba.xml", options = c("no_empty_tags","format","no_declaration"))
write_xml(xmlRoot, file = "prueba.xml", options = c("no_empty_tags","format"))
source('C:/Users/IGarleni/Desktop/R-Workspace/utils/getDependencies/getDependencies.R', echo=TRUE)
getDependencies("dplyr")
library(dplyr)
h <- function()
{
x <- 10
function()
{
x
}
}
i <-  h()
x <- 20
i()
x
h <- function()
{
function()
{
x
}
}
i <-  h()
x <- 20
i()
x
h <- function()
{
x
}
i <-  h()
x <- 20
i()
x
h <- function()
{
x
}
i <-  h()
x <- 20
i()
x <- 20
h <- function()
{
x
}
i <-  h()
i()
x <- 20
h <- function()
{
x <- 10
x
}
i <-  h()
i()
x
i <-  h()
i()
h <- function()
{
x <- 10
function()
{
x
}
}
i <-  h()
x <- 20
i()
h <- function()
{
x <- 10
x
}
i <-  h()
x <- 20
i()
h <- function()
{
x <- 10
print(x)
}
i <-  h()
x <- 20
i()
g()
h()
setwd("C:/Users/IGarleni/Desktop/R-Workspace/utils/Tester/src")
debug(apply)
